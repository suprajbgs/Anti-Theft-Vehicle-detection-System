#include <GSMSIM900.h>
#include <SoftwareSerial.h> // Please increase RX buffer to
256
const char *pinCode = NULL; // Set this to your pin code - set
to NULL if no pin is used
const char *number = "0123456789"; // Set this to the desired
phone number
SoftwareSerial gsmSerial(11, 12); // RX, TX
GSMSIM900 GSM(&gsmSerial, pinCode, 4); // Pointer to
serial instance, pin code, power pin
int z1=0;
//////gps //////
#include <TinyGPS.h>
TinyGPS gps;
bool newData = false;
unsigned long chars;
unsigned short sentences, failed;
char c;
float la, lo;
unsigned long age;
///////////////////
int a1=0;
int a2=0;
void setup()
{
Serial.begin(9600);
 pinMode(9, INPUT_PULLUP);

 pinMode(8, OUTPUT);
 digitalWrite(8, HIGH); // turn the LED on (HIGH is the
voltage level)
gsmSerial.begin(9600); // Start the communication with the
GSM module
43
while (!Serial); // Wait for serial port to connect - used on
Leonardo, Teensy and other boards with built-in USB CDC
serial connection
Serial.println(F("library is running!"));
}
void loop()
{
 if(digitalRead(9)==0 && z1==0)
 {
 digitalWrite(8, LOW); // turn the LED on (HIGH is the
voltage level)
 z1=1;
sms2();
 }
 if(digitalRead(9)==1 && z1==1)
 {
 digitalWrite(8, HIGH); // turn the LED on (HIGH is the
voltage level)
 z1=0;
 }
 GSM.update();
 if(Serial.available()>0)
 {
 c = Serial.read();
 // Serial.write(c); // uncomment this line if you want to see
the GPS data flowing
 if (gps.encode(c)) // Did a new valid sentence come in?
 newData = true;
 }
if(newData)
 {
 gps.f_get_position(&la, &lo, &age);
 la== (TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : la, 6);
44
 lo== (TinyGPS::GPS_INVALID_F_ANGLE ? 0.0 : lo, 6);
 }
if (GSM.newSMS())
 {
 if (GSM.readSMS())
 {
 Serial.println(GSM.messageIn);
 if(strcmp(GSM.messageIn,"TRACK")==0)
 {
 Serial.println("TRACK");
 sms1();
 delay(2000);
 }
 if(strcmp(GSM.messageIn,"OFF")==0)
 {
 Serial.println("OFF");
 digitalWrite(8, HIGH); // turn the LED on (HIGH is the
voltage level)
delay(5000);
 sms3();
while(1);
 }
 if(strcmp(GSM.messageIn,"ON")==0)
 {
 Serial.println("ON");
 digitalWrite(8, LOW); // turn the LED on (HIGH is the
voltage level)
 }
}
 GSM.deleteSMS(); // Delete the SMS again, as the SIM card
has very limited storage capability
 }
 }

void sms1()
{
45
 delay(1000); // Delay of 1000 milli seconds or 1 second
 gsmSerial.println("AT+CMGF=1"); //Sets the GSM
Module in Text Mode
 delay(1000); // Delay of 1000 milli seconds or 1 second
 gsmSerial.println("AT+CMGS=\"YOUR NUMBER\"\r"); //
Replace x with mobile number
 delay(1000);
 gsmSerial.print("Vehicle Now @
http://maps.google.com/maps?q="); //SMS body
 gsmSerial.print(la,8);
 gsmSerial.print(",");// The SMS text you want to send
 gsmSerial.print(lo,8);
 delay(100);
 gsmSerial.println((char)26);// ASCII code of CTRL+Z
 delay(1000);
 Serial.println("sms1 sent");// ASCII code of CTRL+Z
}
void sms2()
{
 delay(1000); // Delay of 1000 milli seconds or 1 second
 gsmSerial.println("AT+CMGF=1"); //Sets the GSM
Module in Text Mode
 delay(1000); // Delay of 1000 milli seconds or 1 second
 gsmSerial.println("AT+CMGS=\"YOUR NUMBER\"\r"); //
Replace x with mobile number
 delay(1000);
 gsmSerial.print("Vehicle ON @
http://maps.google.com/maps?q="); //SMS body
 gsmSerial.print(la,8);
 gsmSerial.print(",");// The SMS text you want to send
 gsmSerial.print(lo,8);
 delay(100);
 gsmSerial.println((char)26);// ASCII code of CTRL+Z
 delay(1000);
 Serial.println("sms2 sent");// ASCII code of CTRL+Z
46
}
void sms3()
{
 delay(1000); // Delay of 1000 milli seconds or 1 second
 gsmSerial.println("AT+CMGF=1"); //Sets the GSM
Module in Text Mode
 delay(1000); // Delay of 1000 milli seconds or 1 second
 gsmSerial.println("AT+CMGS=\"YOUR NUMBER\"\r"); //
Replace x with mobile number
 delay(1000);
 gsmSerial.print("Vehicle OFF @
http://maps.google.com/maps?q="); //SMS body
 gsmSerial.print(la,8);
 gsmSerial.print(",");// The SMS text you want to send
 gsmSerial.print(lo,8);
 delay(100);
 gsmSerial.println((char)26);// ASCII code of CTRL+Z
 delay(1000);
 Serial.println("sms3 sent");// ASCII code of CTRL+Z
}
